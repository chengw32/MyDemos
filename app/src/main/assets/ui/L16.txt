
-------------- 知识点 ----------------
1、动画分类
2、ValueAnimator 只有值的变化不可配置属性 
3、 ObjectAnimator 可以配置需要有动画效果的属性 scaleX，translationX 等等、add动画监听、
4、 几个动画一起执行
5、ValueAnimator ObjectAnimator  都可以设置估值器、插值器
6、估值器 TypeEvaluator 动画设置估值器之后 重写的方法会返回 动画执行进度百分比 0~1 一般利用这个数据
7、插值器 各种特效
8、执行动画可以设置先后顺序

------------

动画分两类：View Animation、Property Animation

View Animation 分 Tween Animation、Frame animation

-------- Tween Animation 补间动画 --------

Tween Animation定义在xml文件中。可以对view实现一系列的转换，例如：移动、渐变、伸缩、旋转。Tween Animation只能应用于View对象，而且只支持一部分属性，如支持缩放旋转而不支持背景颜色的改变。而且对于Tween Animation，并不改变属性的值，它只是改变了View对象绘制的位置，而没有改变View对象本身，比如，你有一个Button，坐标（100,100），Width:100,Height:100，而你有一个动画使其移动（200，200），你会发现动画过程中触发按钮点击的区域仍是(100,100)-(200,200)。

Tween Animation用法：

xml文件 anim 文件夹下面
<set xmlns:androidsetxmlns:android="http://schemas.android.com/apk/res/android"  
     android:shareInterpolator="false"

	<scale  
		...
		/>
	<set
		<rotate
		<scale    
		...
	</set>
</set>

Animation anima =AnimationUtils.loadAnimation(this, R.anim.hyperspace_jump);  
image.startAnimation(hyperspaceJump);  
anima.start();

------ Frame animation 帧动画---------

帧动画是一系列的图片按顺序显示。

用法：

drawable文件
<animation-list xmlns:android="http://schemas.android.com/apk/res/android"  
<item android:drawable="@drawable/rocket_thrust1" android:duration="200" />  
...
</animation-list>  

ImageView rocketImage = (ImageView) findViewById(R.id.rocket_image);  
rocketImage.setBackgroundResource(R.drawable.rocket_thrust);  
  
rocketAnimation = (AnimationDrawable) rocketImage.getBackground();  
rocketAnimation.start();  

--------- Property Animation 属性动画 -----------

Property Animation可以定义在xml文件中，它用来在设定的时间内修改对象的属性。例如背景颜色和alpha的值。

2d 动画实现的本质是 canvas 绘制 。属性动画的本质也是 canvas 绘制的。


--------------- ObjectAnimator -----------------

ObjectAnimator oba = ObjectAnimator.ofFloat(iv,"translationX",0f,200f);
oba.setDuration(500);
oba.start();

translationX 必须是 iv 里的 setXXX 的属性 系统通过反射机制 获取属性并设置值。

添加动画监听： addUpdateListener.。
getAnimatedFraction（）：从回调方法的 ValueAnimator 对象里获取动画执行进度百分比。
 getAnimatdeValue（）：从对象里获取动画的值

多个属性动画一起执行：
1、在监听回调里面根据动画进度设置对应属性的百分比值
2、利用 ObjectAnimator.ofPropertyValuesHolder(iv, PropertyValuesHolder.ofFloat(xxx)...) 返回的动画对象执行动画
3、AnimatorSet 对象 set.playTogether(iv, Animators...); 
执行单个的直接调用 play（animator);
有先后的调用api set.playSequentially();
设置延迟执行 setStartDelay
set.play().with().after()/before()

----------------
插值器 Interpolator 

作用 ：给动画设置特效 

比较常用的插值器
FastOutSlowInInterpolator 无参 前段有个加速度后段减速度
LinearOutSlowInInterpolator 无参 前段匀速后段减速
PathInterpolator 传入path ，path 必须 以（0,0）开头（1,1）结尾
DecelerateInterpolator 匀速减速效果 Decelerate（减速，使减速）
AccelerateInterpolator 加速效果 Accelerate（加速 使加速）
这个有点意思 AnticipateOvershootInterpolator 先后退一下在加速前进 然后减速到终点后往前冲小段在回退到终点
OvershootInterpolator 跟上面的效果差不多 就是少了开始的时候后退的效果
这个有点意思 BounceInterpolator 类似球掉地上弹几下的效果
AnticipateInterpolator 先后退一下在加速前进 然后减速到终点 没有冲出去在回来的效果

-----------------------

估值器 TypeEvaluator 
 
如果插值器满足不了的动画 就得用估值器解决 比如 贝塞尔曲线的位移效果 
用法： ValueAnimator.ofObject(mTypeEvaluator，startValue，endValue) ofObject 会生成动画对象 在用 AnimatorSet 一起执行该动画

使用估值器
TypeEvaluator  是个接口 动画可以设置这个接口（setEvaluator）实现 TypeEvaluator 接口会有回调，回调方法里会返回动画执行的当前进度跟动画的 开始 结束值。估值器的作用就是利用动画执行进度搞事情 。用法可以参考 L17 的 BezierEvaluator （贝塞尔曲线估值器）









