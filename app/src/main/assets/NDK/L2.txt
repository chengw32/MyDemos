
----- 知识点 ------

计算机的存储单位：计算机系统数据只用0和1这种表现形式，一个0或者1占一个“位”，而系统中规定8个位为一个字节。
1位 ：1bit （二进制最基本的一个0 或者一个 1。）
1个字节：1Byte
1Byte = 8bit



对指针的理解

指针是一个变量，其值为另一个变量的内存地址
float *p
 *p 是 [指针]，是指向的 [内存] 所对应存储的值。所以 *p 的值是个数值。
  p 是指针 *p 的值（指针的值是指向的某个变量的内存地址），即 p 的值是内存地址
 &p 是指针 *p 的内存地址
&*p 是 *p 的内存地址，而 *p 是指向的某个变量的值 该值的内存地址就是该对象的内存地址。（？待确定）

函数调用：
1、先写函数 在后面调用前面的函数
2,、函数写在调用之后，先声明函数。
3、include 一个头文件，头文件里写好了要调用的函数

指针运算
1、优先级
2、指针 *p 不要对 p 随便做运算，因为它的值是内存地址，内存地址不能随便运算。

数组与指针
1、定义一个数组时，数组名就是这个数组的首内存地址。
  int a[5] = {1,2,3,4,5};
  printf(" a 的内存地址 %#x\n", &a);
  printf(" a 的值 %#x\n", a);
  因为数组名就是这个数组的首内存地址。所以上面两个值是一样的
  所以 a[0]的内存地址等于 &a 的内存地址

  printf(" a[0] 的内存地址 %#x\n", &a[0]);
  printf(" a[1] 的内存地址 %#x\n", &a[1]);
  a[0]的内存地址跟a[1]的内存地址相差4个字节 因为 int 占四个字节所以每次移动都是四个字节移动。如果数组是 char 类型，则a[0]的内存地址跟a[1]的内存地址差一个字节，因为 char 占一个字节。
	
2、想要获取某个位置的数组的值就要通过对数组的内存地址进行运算操作从而获取值。

指针与函数
1、在调用函数时，如果需要传参数，如果传变量则传过去的是副本，如果不想传的是副本只能把内存地址传过去
例如要调换 x y的值 如果直接传x，y 则会复制一份 x，y传过去 因为内存地址是不一样的。
void change(int *x,int *y){
	int temp = NULL;
	temp = *x;
	*x = *y;
	*y = temp;
}
void main(){
	int x = 1;
	int y = 2;
	change(&x, &y);
}
把 &x 内存地址传过去 接收方是 *x （是个指针，指针就是存内存地址的），这个指针指向的是 x 的内存。吧 *x（*x 是这个指针指向的内存的值，如果给这个 *x 赋值就是给这个指针指向的内存那个值进行赋值） 复制给 temp

指针数组：
是一个数组。数组里存储的是[指针变量]
char *name[] = {"sss","eeee","hgggg"};
数组指针
是一个指针。指向一个数组。
int (*name)[5] ;

二级指针
int a = 1200 ;
int *p = NULL ;
p = &a ;

//二级指针
int **p2 ;
 p2 = &p ;





